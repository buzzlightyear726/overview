{"version":3,"file":"component---src-pages-creating-a-parameterised-package-mdx-9b74e2dcd9d4ae593e5f.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/creating-a-parameterised-package.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassilis/projects/st4sd/public/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn what parameterised packages are and how to create them.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">What is a parameterised virtual experiment package?</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Structure of a parameterised virtual experiment package</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Base section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Parameterisation section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">The Metadata section</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Adding a parameterised package to a registry</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Example</AnchorLink>\n    </AnchorLinks>\n    <p>{`A `}<inlineCode parentName=\"p\">{`parameterised virtual experiment`}</inlineCode>{`defines how to run a virtual experiment in a particular way.`}</p>\n    <p>{`ST4SD provides a registry for parameterised virtual experiments.\nThe registry allows researchers to browse and use these packages.\nEach ST4SD deployment has a registry and we also maintain `}<a parentName=\"p\" {...{\n        \"href\": \"https://registry.st4sd.res.ibm.com/\"\n      }}>{`a publicly available registry`}</a>{`.`}</p>\n    <p>{`This document explains how developers can write  parameterised virtual experiment package.\nFor how these packages can be used by others see `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-the-virtual-experiments-registry-ui\"\n      }}>{`using the virtual experiment registry`}</a>{`.`}</p>\n    <h2>{`What is a parameterised virtual experiment package?`}</h2>\n    <p>{`A parameterised virtual experiment package is a python dictionary (or YAML or JSON structure) that describes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`How to access a virtual experiment`}</li>\n      <li parentName=\"ul\">{`What options to allow users to change`}</li>\n      <li parentName=\"ul\">{`What options have preset values`}</li>\n      <li parentName=\"ul\">{`Metadata about the package.`}</li>\n    </ul>\n    <p>{`It is `}<strong parentName=\"p\">{`parameterised`}</strong>{` as the package can set the values of options in the base experiment to give certain behaviours e.g. setting a quantum method known to be fast, that canâ€™t be overridden by the user.\nThe package can also specify a restricted set of values for an option.\nIn this way the same base virtual experiment can be configured in many ways and provide different parameterised packages for different tasks.`}</p>\n    <h2>{`Structure of a parameterised virtual experiment package`}</h2>\n    <p>{`A parameterised package has three main sections:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The base packages (i.e. workflow definitions) that the virtual experiment consists of.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Where they are located, what version to get, and how to get them. Often there will be just one.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`The parameterisation information:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Presets: options that  users cannot change.`}</li>\n          <li parentName=\"ul\">{`Execution options: options that users can change potential with some restrictions.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Metadata:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Various other information about the package e.g. description, license, maintainer and keywords.`}</li>\n        </ul>\n      </li>\n    </ol>\n    <p>{`Each of these is a top-level key in the package description.\nThe following snippet shows this top-level structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`definition = {\n    \"base\": {\n        # Required: Base package information ...\n    }\n    \"metadata\": {\n            # Required: Various info about the package  ...\n    },\n    \"parameterisation\": {\n      # Optional: What values are set and what can be changed ..\n    }\n}\n`}</code></pre>\n    <p>{`The rest of this document explains each section, outlining what information is required and optional.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`In the following we use YAML to describe the section structure, for ease of explanation. This would have to be converted to a python dictionary to upload to the registry. An example of doing this is given in the `}<a parentName=\"p\" {...{\n          \"href\": \"#pushing-the-package\"\n        }}>{`pushing a package`}</a>{` section.`}</p>\n    </InlineNotification>\n    <h2>{`The Base section`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Sources</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Specifying image registry dependencies</AnchorLink>\n    </AnchorLinks>\n    <p>{`The `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{` section describes where the base virtual experiment is and how to access it.`}</p>\n    <p>{`A virtual experiment can contain multiple base packages although for handwritten packages this will usually be one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`base\n - name: #OPTIONAL - defaults to \"main\", is required for multi-package experiments\n   source:\n      $PACKAGE_SOURCETYPE: $PACKAGE_SOURCE_STRUCTURE #REQUIRED: ONE package source type. See below for options\n   dependencies:\n     imageRegistries:\n       - $IMAGE-REGISTRY_STRUCTURE #OPTIONAL: list of image registry structures defining how to access the images required by the experiment. See below for options.\n   config: #How to read the experiment from the given source e.g. manifest etc. REQUIRED IF the base virtual experiment uses standard packaging (is a workflow conf + manifest)\n     path: #relative (to the \"root\" of \\`\\${BASE_PACKAGE}.source\\`) path to the virtual experiment (flowir) configuration file\n     manifestPath: #relative (to \"root\" of \\`\\${BASE_PACKAGE}.source\\`) path to the virtual experiments manifest file\n`}</code></pre>\n    <h3>{`Sources`}</h3>\n    <p>{`Select the source that matches where your virtual experiment is stored`}</p>\n    <h4>{`Git source`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Yaml\"\n      }}>{`git:\n  location:\n    url: the http url of the repo\n    # Must specify exactly ONE of branch, tag, and commit\n    branch: name of branch\n    tag: name of tag\n    commit: git commit hash\n  security:\n    oauth:\n      # You must use exactly ONE of \\`value\\` or \\`valueFrom\\`.\n      # \"value\" if automatically converted to \"valueFrom.secretKeyRef\\` when you push the package\n      valueFrom:\n        secretKeyRef:\n          name: name of secret containing oauthSecret key\n          key: name of key holding the token, defaults to \"oauth-token\"\n      value: an oauth api key for authenticating to git with HTTPS basic auth\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`ST4SD will use the oauth-token you provide to `}<inlineCode parentName=\"p\">{`git clone https://\\${oauth-token}@server.com/your-org/your-repo.git`}</inlineCode>{`.`}</p>\n      <p>{`If you are using `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\"\n        }}>{`Github`}</a>{` to host your git repository you can generate a Personal Access Token with just read-access to your git repository.`}</p>\n      <p>{`If you are using `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.gitlab.com/ee/user/project/deploy_tokens/#create-a-deploy-token\"\n        }}>{`Gitlab`}</a>{`, you can generate a Deploy Token with read acces to your project.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`For `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#using-a-token-on-the-command-line\"\n        }}>{`Github`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://docs.gitlab.com/ee/user/project/deploy_tokens/#clone-a-repository\"\n        }}>{`Gitlab`}</a>{` you should prefix the Personal Access Token with your username like so: `}<inlineCode parentName=\"p\">{`\\${Username}:\\${PersonalAccessToken}`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h4>{`Datashim source`}</h4>\n    <p>{`If you have installed `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/datashim-io/datashim\"\n      }}>{`Datashim`}</a>{` on your cluster, you can use a Datashim `}<inlineCode parentName=\"p\">{`dataset`}</inlineCode>{` as the location of your virtual experiment base package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`dataset:\n  # No need for a security field because Datashim removes this requirement.\n  location:\n    dataset: the name of the dataset object\n`}</code></pre>\n    <h4>{`S3 source`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`s3:\n  location:\n    region: region (optional)\n    endpoint: S3 endpoint url\n    bucket: bucket name\n  security:\n    valueFrom:\n        # Must choose exactly ONE of secretS3KeyRef and valuseS3\n        # \"valuesS3\" is automatically converted to \"secretS3KeyRef\" when you push the package\n      secretS3KeyRef:\n        name: name of existing kubernetes Secret object containing access information\n          # keyAccessKeyId has default value \"accessKeyId\"\n        keyAccessKeyId: key in Secret object that holds accessKeyId\n          # secretAccessKey has default value \"secretAccessKey\"\n        keySecretAccessKey: key in Secret object that holds secretAccessKey\n      s3Ref:\n        accessKeyId: Value of accessKeyId\n        secretAccessKey: Value of accessKeyId\n`}</code></pre>\n    <h3>{`Specifying image registry dependencies`}</h3>\n    <p>{`Virtual experiments often use images which may be stored in private registries. This structure allows the developer to provide ST4SD with information on how to access these registries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`dependencies:\n  #An Optional dictionary of dependency types\n  imageRegistries: # An optional list of image registries struct\n  - serverUrl: the url to the image registry\n    security:\n      valueFrom:\n        # Must select exactly 1 of secretKeyRef and usernamePassword\n        # \"usernamePassword\" is automatically converted to a \"secretKeyRef\" when the package is pushed\n        secretKeyRef:\n          name: name of an existing \"docker-registry\" kubernetes secret object containing the access information\n          key: Name of key containing the auth information (default is .dockerconfigjson)\n        usernamePassword:\n          # here expect fields we would use for \\`kubectl create secret docker-registry\\`\n          username: ...\n          password: ...\n\n`}</code></pre>\n    <h2>{`The Parameterisation section`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Parameterisation rules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Presets</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Execution options</AnchorLink>\n    </AnchorLinks>\n    <p>{`ST4SD supports 2 levels of parameterisation:`}<inlineCode parentName=\"p\">{`presets`}</inlineCode>{` which are options that virtual experiment developers decide and users cannot change; and `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{`  that virtual experiment developers allow users to override potentially with some limit.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`parameterisation:\n  presets: ...\n  executionOptions: ...\n`}</code></pre>\n    <h3>{`Parameterisation rules`}</h3>\n    <p>{`The parameter types that can be specified in each section are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`variables (`}<inlineCode parentName=\"li\">{`variables`}</inlineCode>{`): Values for variables used in the experiment`}</li>\n      <li parentName=\"ul\">{`data-files (`}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`) : Values for data files used by the experiment`}</li>\n      <li parentName=\"ul\">{`platform (`}<inlineCode parentName=\"li\">{`platform`}</inlineCode>{`): Value for the platform (named set of variables) to use`}</li>\n      <li parentName=\"ul\">{`runtime arguments (`}<inlineCode parentName=\"li\">{`runtime`}</inlineCode>{`) : `}<inlineCode parentName=\"li\">{`elaunch.py`}</inlineCode>{` command line arguments`}</li>\n    </ul>\n    <p>{`Both `}<inlineCode parentName=\"p\">{`presets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` can be specified in same package.`}</p>\n    <p>{`It is an error to specify the same parameter (variable, data file, runtime option) in both sections. In addition `}<inlineCode parentName=\"p\">{`platform`}</inlineCode>{` can only be specified in one of the two sections.`}</p>\n    <p>{`If a virtual experiment has a parameter that is not specified in either section it is `}<inlineCode parentName=\"p\">{`preset`}</inlineCode>{` with its default value and cannot be changed.`}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`If a developer wants a user to be able to provide a value for a parameter they `}<strong parentName=\"p\">{`must`}</strong>{` specify it in `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode></p>\n    </InlineNotification>\n    <p>{`For `}<inlineCode parentName=\"p\">{`executionOptions`}</inlineCode>{` the value of the `}<inlineCode parentName=\"p\">{`parameter`}</inlineCode>{` is resolved as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The value provided by the user`}</li>\n      <li parentName=\"ol\">{`The default value provided by the developer in the parameterised package if there is one`}</li>\n      <li parentName=\"ol\">{`The first value in the array of options provided by the developer in the parameterised package if there is one`}</li>\n      <li parentName=\"ol\">{`If none of the above exist the default value of the parameter in the `}<inlineCode parentName=\"li\">{`base-package`}</inlineCode>{` is used`}</li>\n    </ol>\n    <h3>{`Presets`}</h3>\n    <p>{`Use presets to define set values for parameters`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`parameterisation:\n  presets:  # optional\n    # Fields defined here *cannot* be overridden by \\`executionOptions\\`.\n    # All fields are optional\n    variables: #A list of preset values for variables in the virtual experiment\n    - name: $name of variable\n      value: $variableValue\n    data:\n      - name: name of a file in the \"data\" directory\n        value: contents of file - utf8 string (not suitable for binary files)\n    runtime:\n      args:\n      - array of \\`elaunch.py\\` command line strings\n    platform:  #Value for the experiment platform.\n\n\n\n`}</code></pre>\n    <h3>{`Execution options`}</h3>\n    <p>{`Use execution options to allow user to choose values for parameters if they want`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`  executionOptions: # optional\n    # users may override values within constraints that workflow developers set\n    variables:\n    # Variables that the developer allows the user to override.\n    # These CANNOT appear in presets.variables\n    - name: $variable name\n      valueFrom: #Optional: An array of possible values for the variable\n      # If a user does set a value for the variable the 1st entry is used\n      # If valueFrom is not given then user can set any value for the variable.\n      # if they do not set any value then the variable\n      # receives the value that the workflow definition contains in\n      # the platform definition\n      - value: value of variable\n    data: #A list of data files whose contents the user can set.\n    - name: filename under \\`data\\` directory, the file must already exist\n    runtime: # Arguments to pass to \\`elaunch.py\\`\n             # (cannot include -i -a -d --instanceName)\n      args:\n      - array of elaunch.py command line strings\n    platform: #Default for experiment platform or choice.\n              # Cannot be specified here if in \\`presets\\`\n    - an array of platform names. # If the user does not specifying one on start\n                                  # then the 1st entry is used. If no platform\n                                  # is specified the \\`default\\` platform is used\n\n\n`}</code></pre>\n    <h2>{`The Metadata section`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`metadata`}</inlineCode>{` section is used to provide various other information about the parameterised virtual experiment.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`metadata:\n  package: #All the maintainer metadata. Can decide exact structure at implementation time.\n    name: the package name\n    tags: # Optional\n    - latest # On Push, auto insert latest if missing\n    maintainer: email (optional)\n    license: some string (optional)\n    keywords: # optional\n    - keyword 1\n    - keyword 2\n\n`}</code></pre>\n    <h2>{`Adding a parameterised package to a registry`}</h2>\n    <AnchorLinks small mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Pushing the package</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Parameterised Package Identifier</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Package Tags</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Registry metadata</AnchorLink>\n    </AnchorLinks>\n    <h3>{`Pushing the package`}</h3>\n    <h4>{`From a python dictionary`}</h4>\n    <p>{`The parameterised package is stored as a dictionary in a python module `}<inlineCode parentName=\"p\">{`mypackage.py`}</inlineCode>{` (can be any name). The dictionary is assigned to a variable (can be any name) e.g.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`d = {\n  \"base\": ...\n}\n`}</code></pre>\n    <p>{`Then`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import mypackage\napi.api_experiment_push(mypackage.d)\n`}</code></pre>\n    <h4>{`From YAML`}</h4>\n    <p>{`The parameterised package is stored as YAML in a  file `}<inlineCode parentName=\"p\">{`mypackage.yaml`}</inlineCode>{` (can be any name).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import yaml\nwith open('mypackage.yaml') as f:\n    api.api_experiment_push(yaml.load(f))\n`}</code></pre>\n    <h4>{`From JSON`}</h4>\n    <p>{`The parameterised package is stored as  JSON in a file `}<inlineCode parentName=\"p\">{`mypackage.json`}</inlineCode>{` (can be any name).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nwith open('mypackage.json') as f:\n    api.api_experiment_push(json.load(f))\n`}</code></pre>\n    <h4>{`Registry actions when a package is pushed`}</h4>\n    <p>{`On pushing a parameterised virtual experiment package, the registry:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Generates a unique Id for the entry  see `}<a parentName=\"li\" {...{\n          \"href\": \"#parameterised-package-identifier\"\n        }}>{`Parameterised Packaged Identifier`}</a></li>\n      <li parentName=\"ul\">{`Applies and updates tags - see `}<a parentName=\"li\" {...{\n          \"href\": \"#package-tags\"\n        }}>{`Package Tags`}</a></li>\n      <li parentName=\"ul\">{`Stores any credentials as Kubernetes secrets and converts the relevant fields in the parameterised package to `}<inlineCode parentName=\"li\">{`secretKeyRef`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`secretS3KeyRef`}</inlineCode>{` types.`}</li>\n      <li parentName=\"ul\">{`Adds additional data to the parameterised package - see `}<a parentName=\"li\" {...{\n          \"href\": \"#registry-metadata\"\n        }}>{`registry metadata`}</a></li>\n    </ul>\n    <h3>{`Parameterised Package Identifier`}</h3>\n    <p>{`When  a parameterised package is pushed to the virtual experiment registry it is assigned a  `}<inlineCode parentName=\"p\">{`digest`}</inlineCode>{` which is unique between all packages with the same package name (the value of `}<inlineCode parentName=\"p\">{`metadata.package.name`}</inlineCode>{`).`}</p>\n    <p>{`The unique identifier of the package is then `}<inlineCode parentName=\"p\">{`$packageName@$digest`}</inlineCode>{`. For example `}<inlineCode parentName=\"p\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode></p>\n    <p>{`By convention the registry assumes  parameterised packages with the same package name represent different versions of that package. These are collected together in the registry-ui with the details of the most recent (last uploaded) package shown and links to all previous versions of the package`}</p>\n    <h3>{`Package Tags`}</h3>\n    <p>{`Parameterized packages can have  `}<em parentName=\"p\">{`tags`}</em>{`  applied to them. A tag is a shorthand for referencing the package. For example by adding the tag `}<inlineCode parentName=\"p\">{`1.0`}</inlineCode>{` to the package `}<inlineCode parentName=\"p\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode>{` you can reference it as `}<inlineCode parentName=\"p\">{`my-experiment:1.0`}</inlineCode>{` in various operations.`}</p>\n    <p>{`Developers can specify tags when pushing a package using the  `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{` field of the package payload. Tagging a parameterised package with a tag removes the tag from any other parameterised package with the same name. This guarantees that if `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` exists, it points to exactly one `}<inlineCode parentName=\"p\">{`$packageName@$digest`}</inlineCode>{`. The API call `}<inlineCode parentName=\"p\">{`api_experiment_update_tags(packageIdentifier, tags)`}</inlineCode>{` can also be used add or remove a tag to a package at any time. Note, this call requires `}<inlineCode parentName=\"p\">{`tags`}</inlineCode>{` to include `}<strong parentName=\"p\">{`all`}</strong>{` tags you want associated with the package. If an existing tag is not in this list then it will be removed.`}</p>\n    <p>{`The current tags associated with a package can be found by inspecting the `}<inlineCode parentName=\"p\">{`metadata.package.tags`}</inlineCode>{` element of the package definition in the registry.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`When a package is pushed it is automatically tagged `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` by the registry.\nIf only a package-name is passed to an API call require a package identifier then the tag `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` is assumed.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p><inlineCode parentName=\"p\">{`latest`}</inlineCode>{` can be moved to another digest with the same-package name if desired using `}<inlineCode parentName=\"p\">{`api_experiment_update_tags`}</inlineCode>{`. However `}<inlineCode parentName=\"p\">{`latest`}</inlineCode>{` cannot be removed. That is you will receive an error if you omit it from the `}<inlineCode parentName=\"p\">{`tag`}</inlineCode>{` list in `}<inlineCode parentName=\"p\">{`api_experiment_update_tags`}</inlineCode>{` for a digest that is tagged with `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{`. You can only remove the `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{` tag from a digest if you tag a different digest with the same name `}<inlineCode parentName=\"p\">{`package-name`}</inlineCode>{` with the tag  `}<inlineCode parentName=\"p\">{`:latest`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h4>{`Example`}</h4>\n    <p>{`A parameterised package with name `}<inlineCode parentName=\"p\">{`my-experiment`}</inlineCode>{` is pushed to the registry. It is given the digest `}<inlineCode parentName=\"p\">{`sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86`}</inlineCode>{`.`}</p>\n    <p>{`All 3 identifiers below point to the same digest:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment:latest`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f8`}</inlineCode></li>\n    </ul>\n    <p>{`Any of these 3 identifiers can be used to refer to the new parameterised package in API call e.g. to start an instance of this parameterised virtual experiment all the following will work:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`api.api_experiment_start(\"my-experiment\", payload={})\napi.api_experiment_start(\"my-experiment:latest\", payload={})\napi.api_experiment_start(\"my-experiment@sha256x16092ca4bb13955b1397bf38cfba45ef11c9933bf796454a81de4f86\", payload={})\n`}</code></pre>\n    <h4>{`Package tag update rules`}</h4>\n    <p>{`If a tag is requested for a digest and that tag is already associated with another digest with the same package-name,  then the registry updates `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` to point to the new package. This ensures that `}<inlineCode parentName=\"p\">{`$packageName:$tag`}</inlineCode>{` points to a unique digest even if the workflow developers pushed the `}<inlineCode parentName=\"p\">{`$tag`}</inlineCode>{` in the past.`}</p>\n    <p>{`In general this operation involves updating the `}<inlineCode parentName=\"p\">{`metadata.registry.tags`}</inlineCode>{` fields of all parameterised packages with the same `}<inlineCode parentName=\"p\">{`package-name`}</inlineCode>{`.`}</p>\n    <h3>{`Registry metadata`}</h3>\n    <p>{`The registry adds various information it discovers to the `}<inlineCode parentName=\"p\">{`metadata`}</inlineCode>{` section of the package under the `}<inlineCode parentName=\"p\">{`registry`}</inlineCode>{` key. This includes the id of the package`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`registry: #All data added by runtime - developers cannot set anything under registry\n    digest: $a string up to 63 characters #The identifier\n    createdOn: UTC time that this digest was created, format is %Y-%m-%dT%H%M%S.%f%z\n    timesExecuted: int - automatically increased every time a user launches this virtual experiment entry in the ST4SD deployment the registry is attached to\n    tags: #A list of tags which point to this digest.\n    - $TAG # This is a SUBSET of metadata.package.tags. It can be EMPTY if no tag points to this digest anymore\n    interface: {} # ST4SD injects the Virtual experiment interface if it exists\n    data: #The list of filenames under the \\`data\\` directory (just top-level files, NO directories)\n    - name: $DATA_FILE_NAME\n    inputs: #The list of files under the \\`input\\` directory. These are files that users must provide when launching this virtual experiment\n    - name: $INPUT_FILE_NAME\n    containerImages: #A list of the names of the container images that could be used by this virtual experiment. If\n    - name: the name of a container image (e.g. a URL)\n`}</code></pre>\n    <h2>{`Example`}</h2>\n    <p>{`Here is an example parameterised package for the `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/tutorial\"\n      }}>{`sum-numbers toy virtual experiment`}</a>{` which lives on `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{` that demonstrates many of the features discussed above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`definition = {\n    \"base\": {\n        # We define the one or more base-packages (here just one)\n        \"packages\": [{\n            \"source\": {\n                \"git\": {\n                    \"location\": {\n                        # This one lives on Git, under the \"main\" branch, we can also use\n                        # \"tag\" and \"commit\"\n                        \"url\": \"https://github.com/st4sd/sum-numbers.git\",\n                        \"branch\": \"main\"\n                    }\n                }\n            },\n            \"config\": {  # Optional - not required for this example\n                \"path\": \".\", # use when package is not at the root of the source location\n                \"manifestPath\": None,  # relative path to manifest YAML (not used in this example)\n            }\n        }]\n    },\n    \"metadata\": {\n        \"package\": {\n            \"name\": \"sum-numbers\", # Required\n            \"tags\": [\"latest\"],  # Optional - *always* includes \"latest\"\n            \"maintainer\": \"vassilis.vassiliadis@ibm.com\", # Optional but recommended\n            \"description\": \"Toy virtual experiment\", # Optional but recommended\n            \"keywords\": [ # Optional but recommended\n                \"openshift\", \"hello-world\"\n            ]\n        }\n    },\n    \"parameterisation\": {  # Optional but recommended\n        \"presets\": {  # Options that users CANNOT override\n            \"runtime\": {\n                \"args\": [\n                    # *Always* register the workflow to the ST4SD datastore (aka Centralized Database)\n                    \"--registerWorkflow=yes\"\n                ]\n            }\n        },\n        \"executionOptions\": { # Options that users *MAY* override and *MUST* adhere to rules below\n            \"variables\": [\n                # Configures the number of replicas, can be any positive integer, or 1 if unspecified\n                {\"name\": \"numberOfPoints\", \"value\": \"1\"}\n            ],\n            \"data\": [\n                # Users *may* provide a \\`cat_me.txt\\` file\n                {\"name\": \"cat_me.txt\"}\n            ],\n            # Users can *only* execute the \\`openshift\\` and \\`default\\` platforms - even if the virtual experiment\n            # comes with more platform definitions\n            \"platform\": [\"openshift\", \"default\"]\n        }\n    }\n}\n\napi.api_experiment_push(definition)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","small","kind","isMDXComponent"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-memoization-mdx-32c7e6ce43fdddb1d344.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/memoization.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/alessandropomponio/Documents/GitHub/public/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <p>{`ST4SD can automatically reuse results of previous calculations rather than executing them again. This feature is called `}<strong parentName=\"p\">{`memoization`}</strong>{`. `}</p>\n    <p>{`Memoization can dramatically increase efficiency as many virtual experiments internally perform the same calculations on input systems, even if they measure different properties.  `}</p>\n    <p>{`An example is molecule geometry optimization via Density Functional Theory. Using memoization ST4SD can recognise when an experiment instance wants to perform a geometry optimization on a molecule that has already been completed, even if this was executed in a different type of experiment. Instead of running this potentially expensive calculation again, ST4SD uses the existing results. `}</p>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Its is easy to use memoization in ST4SD. However for production runs please read the details of how  memoization works in order to understand the expected behaviour under various scenarios.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Although you can use memoization with all experiments,  some can be more susceptible to issues than. In ST4SD 2.0 we will provide information on the memoization suitability of virtual experiments in the registry as part of the `}{`[best practices]`}{`(/virtual experiment-developer-best-practices)`}</p>\n    </InlineNotification>\n    <h2>{`How to use memoization`}</h2>\n    <p>{`To use memoization you simply add the following information when `}<a parentName=\"p\" {...{\n        \"href\": \"/st4sd/overview/running-workflows-on-openshift/#running-a-virtual-experiment\"\n      }}>{`starting a virtual experiment`}</a>{` i.e. to the `}<inlineCode parentName=\"p\">{`api.api_experiment_start()`}</inlineCode>{` payload:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`payload['additionalOptions'] = ['--useMemoization=true']\n`}</code></pre>\n    <p>{`When this option is specified before executing each component in the virtual experiment the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` will check if that component has executed before. If it has, then it will use the already computed results rather than executing the component. `}</p>\n    <p>{`The key concept users need to understand is how the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{`decides when components are the same. This is covered in the next sections. `}</p>\n    <InlineNotification kind=\"success\" mdxType=\"InlineNotification\">\n      <p>{`Developers do not have to do anything to enable memoization in their virtual experiments.`}</p>\n    </InlineNotification>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`If you query the detailed-status of a virtual experiment instance that had memoized components, those components will have state `}<inlineCode parentName=\"p\">{`Finished`}</inlineCode>{`, exit-status `}<inlineCode parentName=\"p\">{`Killed`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`N/A`}</inlineCode>{` for all time related properties e.g. launch time and runtime. This is because the component was never run. This can be confusing so in a future release we will make it more evident these components have been memoized.`}</p>\n    </InlineNotification>\n    <h2>{`How the runtime decides if a component has run before`}</h2>\n    <h3>{`Objective`}</h3>\n    <p>{`The objective of the ST4SD memoization system is, given a ready-to-execute component, to reuse the result of a previously executed component if that component had:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The same program version`}</li>\n      <li parentName=\"ul\">{`With the same command line arguments`}</li>\n      <li parentName=\"ul\">{`With the same input data`}</li>\n    </ul>\n    <h3>{`Additional Requirements`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`A match should be found if the previous execution was on a different architecture or if the resource request was different (number CPUs or CPU v GPU).`}</li>\n      <li parentName=\"ol\">{`Support matching even if inconsequential environment or time specific information e.g. timestamps, are in the inputs making them not strictly equivalent`}</li>\n      <li parentName=\"ol\">{`Memoization should be significantly faster than executing the component. In particular we want to avoid directly comparing the contents of directories with many large input files e.g. simulation outputs 10-100GBs size, which could be computationally expensive`}</li>\n      <li parentName=\"ol\">{`The system should be transparent i.e. developers do not need to perform additional development tasks to enable it.   `}</li>\n    </ol>\n    <h3>{`Method`}</h3>\n    <p>{`ST4SD uses a fast and transparent method to generate a high-fidelity memoization key for each component. If the runtime finds a previously run component has a matching key then that component’s results are re-used.`}</p>\n    <p>{`Briefly, for all nodes the memoization key includes information on`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The command line`}</li>\n      <li parentName=\"ul\">{`The container image name (if using a container)`}</li>\n      <li parentName=\"ul\">{`Hash of directly referenced input files`}</li>\n      <li parentName=\"ul\">{`For a reference to component directories: The memoization key of the producer node, followed by the relative path of the reference to the working directory of the component`}</li>\n    </ul>\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Currently references that point to non-component directories are not included in the memoization key. We recommend developers directly reference files in these directories`}</p>\n    </InlineNotification> \n    <p><strong parentName=\"p\">{`Note`}</strong>{`: Resource requests are not included in the memoization key. This satisfies additional requirement (1). `}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: The contents of component directories are `}<strong parentName=\"p\">{`not`}</strong>{` hashed if the directory as whole is referenced. This directly fulfils additional requirement (3). It also fulfils additional requirement (2) as you can reference the directory instead of the files if you have this issue.`}</p>\n    <p>{`Our algorithm provides high-fidelity even without inspecting the contents of directories because`}</p>\n    <ul>\n      <li parentName=\"ul\">{`In this case a component’s memoization key includes the keys of a component’s producer nodes.`}</li>\n      <li parentName=\"ul\">{`The input files references by source nodes are hashed`}</li>\n    </ul>\n    <p>{`This means if a component matches a previously executed one, then they are part of the same execution chain and the inputs to the source of the chain are identical.`}</p>\n    <p>{`You can read more details of our method in `}<a parentName=\"p\" {...{\n        \"href\": \"https://ieeexplore.ieee.org/document/9860151\"\n      }}>{`this paper.`}</a></p>\n    <h3>{`Potential Vulnerabilities`}</h3>\n    <p>{`We call the cases where our memoization key will not correctly identify reuse opportunities w.r.t. the stated objectives `}<em parentName=\"p\">{`vulnerabilities`}</em>{`. These either cause false-negatives (did not reuse previous results when it could have) or false-positives (reused previous results when it shouldn’t have), which are of greater concern. `}</p>\n    <ol>\n      <li parentName=\"ol\">{`False-Positive: If the code of a program changes e.g. version change without any indication of the change, results produced with previous executions will be identified as equivalent. `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`To avoid this developers should ensure they indicate changes in versions of codes in their virtual experiment by modifying e.g. a version tag in the container name or adding the component to program name`}</li>\n          <li parentName=\"ul\">{`If you use full sha for images this cannot happen. However this would not allow memoization with multi-arch images `}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`False-Positive: If a component consumes non-component directories then, if the contents of those directories change and no-other inputs change, two runs of this will match`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`As mentioned above developers should avoid references to non-component directories`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`False-Negative: If a component consumes the same information (e.g. a molecule SMILE) from of one of its producer components, but references the producer  directory rather than a specific file in that directory, previous calculations it has performed on this molecule may not be reused. `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is because the memoization key of the producer changes when its inputs change. `}</li>\n          <li parentName=\"ul\">{`For example if the same molecule appears in two different lists provided to the producer then its memoization key will be different. This in turn leads to a different  memoization key for the consumer and hence no match.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`False-Negative: If a component can itself process multiple systems e.g. molecules, then if a subset of the same molecules are passed to the same component there will be no match.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`This is because the input to the component has changed and its output will be different even though partially similar to previous runs`}</li>\n          <li parentName=\"ul\">{`This situation lies outside the bounds of ST4SDs memoization objective. If developers want memoization to function in this case they need to split the inputs in the workflow. `}</li>\n          <li parentName=\"ul\">{`Technically this requires knowledge of how the specific component functions which is counter to ST4SDs adoption of a black-box scope and aim of transparent memoization - see `}<a parentName=\"li\" {...{\n              \"href\": \"https://ieeexplore.ieee.org/document/9860151\"\n            }}>{`this paper for more.`}</a></li>\n        </ul>\n      </li>\n    </ol>\n    <h2>{`How memoization is implemented`}</h2>\n    <p>{`The memoization mechanism of ST4SD is built on top of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/st4sd/st4sd-datastore/\"\n      }}>{`st4sd-datastore`}</a>{` microservices.`}</p>\n    <p>{`At runtime the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{`  always generates a memoization key for each component in the virtua experiment it executes. This is regardless if memoization is on or not. `}</p>\n    <p>{`By default every virtual experiment you run is registered to the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{`. Part of the information stored for each component in the run is its generated memoization key.`}</p>\n    <p>{`When memoization is switched on, after generating the memoization key for a to-be-executed component, the `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` queries the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` to see if any previous component has the same key. If it does then `}<inlineCode parentName=\"p\">{`st4sd-runtime-core`}</inlineCode>{` fetches the output of the previous component from the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` and places it in the working directory of the to-be-executed component. It then skips execution of that component and moves to its dependencies.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}
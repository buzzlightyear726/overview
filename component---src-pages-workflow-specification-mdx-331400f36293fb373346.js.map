{"version":3,"file":"component---src-pages-workflow-specification-mdx-331400f36293fb373346.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/workflow-specification.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/alessandropomponio/Documents/GitHub/public/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn what FlowIR elements are there and how they work.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Component</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">DataReference</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Environments</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Variables</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Blueprints</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Platforms</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">FlowIR Scopes</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">FlowIR options/variable inheritance sequence</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Key-outputs</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Interface and Properties</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Component`}</h2>\n    <p>{`The component element describes a step in the workflow. The definition for a component is (some fields omitted):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`stage: integer greater or equal to 0 (optional - defaults to 0)\nname: the name of the component (must be unique in the same stage)\ncommand:\n  executable: str\n  arguments: str\n  environment: (null, str)\nreferences:\n- <reference:str>\nworkflowAttributes:\n  aggregate: bool\n  replicate: (int, null, str containing %(variable-reference)s or array access)\nresourceRequest:\n  numberProcesses: (int, str containing %(variable-reference)s or array access)\n  numberThreads: (int, str containing %(variable-reference)s or array access)\n  ranksPerNode: (int, str containing %(variable-reference)s or array access)\n  threadsPerCore: (int, str containing %(variable-reference)s or array access)\n  memory: (int (size in bytes), str containing %(variable-reference)s or array access or Mib/Kib bytes )\nresourceManager:\n  config:\n    backend: (name of backend e.g \"local\", \"kubernetes\", \"lsf\", etc:str)\n  kubernetes:\n    image: str\n    image-pull-secret: (null, str)\n    namespace: (null, str)\n    host: (null, str)\nvariables:\n  s<variable name:str>: <value: str, int, bool, float>\n`}</code></pre>\n    <h3>{`Override`}</h3>\n    <p>{`Components have an `}<inlineCode parentName=\"p\">{`override`}</inlineCode>{` key that allows overriding their definition based on the active platform. The definition of the override field is:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`override:\n  <platform name:str>:\n    <component-field> #Any top-level field (with the sub-keys to be overriden) except name, stage  command and reference\n`}</code></pre>\n    <p>{`The main reason to do this is change `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` ,`}<inlineCode parentName=\"p\">{`worklfow-attributes`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`resourceManager`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`resourceRequest`}</inlineCode>{`, based on e.g. GPU or CPU deployment (see `}{`[platform][#platforms]`}{`).`}</p>\n    <p>{`Only the key/values specified are changed or added. Existing key/values that aren’t specified remain with their base values. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`...\nresourceRequest:\n  numberThreads: 16\n  threadsPerCore: 1\n    memory: 100 MBi\noverride:\n   bigmem:\n     resourceRequest:\n       memory: 1GBi\n`}</code></pre>\n    <p>{`In this case on platform `}<inlineCode parentName=\"p\">{`bigmem`}</inlineCode>{` this component would still ask for 16 cores but with an increased memory request.  `}</p>\n    <h3>{`Description of basic FlowIR component fields`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`stage: integer greater or equal to 0 (optional - defaults to 0)`}</li>\n      <li parentName=\"ul\">{`name: the name of the component (must be unique in the same stage)`}</li>\n      <li parentName=\"ul\">{`command:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`executable: path to executable. It can be absolute, relative to the instance directory by prefixing the path with `}<inlineCode parentName=\"li\">{`bin/`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`<application>/`}</inlineCode>{`. It can also be just the name of a binary. If the path is not absolute the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will look for the executable in the folders specified under `}<inlineCode parentName=\"li\">{`$PATH`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\">{`arguments: arguments to binary`}</li>\n          <li parentName=\"ul\">{`environment: Name of the `}<inlineCode parentName=\"li\">{`environment`}</inlineCode>{` to use. The definition will be searched in the top level `}<inlineCode parentName=\"li\">{`environments`}</inlineCode>{` field of FlowIR.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`references: Each string in this list is a string representation of a `}<a parentName=\"li\" {...{\n          \"href\": \"#datareference\"\n        }}>{`DataReference`}</a>{` to either a reference to a file, a folder, or a component. References to components and files produced by a component (i.e. under the working directory of a component) indicate a data dependency which the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` respects when scheduling the tasks for components. There are several `}<inlineCode parentName=\"li\">{`reference methods`}</inlineCode>{`, but these are the most commonly used:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`:output`}</inlineCode>{`: the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will replace `}<inlineCode parentName=\"li\">{`<component name>:output`}</inlineCode>{` references with the `}<inlineCode parentName=\"li\">{`stdout`}</inlineCode>{` output of the referenced component`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`:ref`}</inlineCode>{`: the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will replace `}<inlineCode parentName=\"li\">{`<component name or file>:ref`}</inlineCode>{` references with the absolute path to the component or file on the filesystem.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`:copy`}</inlineCode>{`: the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will copy the file referenced by this DataReference into the working directory of the component which includes this reference. This DataReference method cannot be part of the `}<inlineCode parentName=\"li\">{`command.arguments`}</inlineCode>{` field.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`workflowAttributes:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`replicate: If set to a positive number `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will replicate this component and its downstream tree `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` times (see `}<inlineCode parentName=\"li\">{`aggregate`}</inlineCode>{` below before you use this option).`}</li>\n          <li parentName=\"ul\">{`aggregate: If this option is set to `}<inlineCode parentName=\"li\">{`True`}</inlineCode>{` and the component belongs in the downstream sub-tree of a `}<inlineCode parentName=\"li\">{`replicate`}</inlineCode>{` component the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` will stop replicating just before the `}<inlineCode parentName=\"li\">{`aggregate`}</inlineCode>{` component. Each reference of the `}<inlineCode parentName=\"li\">{`aggregate`}</inlineCode>{` component to the `}<inlineCode parentName=\"li\">{`replicate`}</inlineCode>{` component will be expanded to `}<inlineCode parentName=\"li\">{`N`}</inlineCode>{` references (one for each upstream replicated component).`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`resourceRequest: provides hints to the backend about the resource requirements of this component tasks`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`numberProcesses`}</li>\n          <li parentName=\"ul\">{`numberThreads`}</li>\n          <li parentName=\"ul\">{`ranksPerNode`}</li>\n          <li parentName=\"ul\">{`threadsPerCore`}</li>\n          <li parentName=\"ul\">{`memory`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`resourceManager:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`config:`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`backend: Which backend to use. Valid options are:`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`local (default option)`}</li>\n                  <li parentName=\"ul\">{`kubernetes`}</li>\n                  <li parentName=\"ul\">{`lsf`}</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`kubernetes: Options to use when the `}<inlineCode parentName=\"li\">{`kubernetes`}</inlineCode>{` backend is selected for this component`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`image:`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`variables: Collection of variables; can either override those defined in platform or introduce new ones. In both cases the value specified here is visible to `}<em parentName=\"li\">{`this`}</em>{` component only. See `}<a parentName=\"li\" {...{\n          \"href\": \"#flowir-optionsvariable-inheritance-sequence\"\n        }}>{`FlowIR options/variable inheritance sequence`}</a>{` for details on how scope layering/inheritance functions in FlowIR.`}</li>\n    </ul>\n    <h4>{`Defining components`}</h4>\n    <p>{`Components are placed inside the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` array:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`components:\n- stage: int\n  name: str\n  <component-core>\n  override:\n    <platform name:str>:\n      <component-core>\n`}</code></pre>\n    <p>{`Components must have a unique `}<inlineCode parentName=\"p\">{`(stage, name)`}</inlineCode>{` tuple. Here’s an extract from the `}<inlineCode parentName=\"p\">{`sum-numbers`}</inlineCode>{` example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`components:\n# ...\n- stage: 1\n  name: PartialSum\n  command:\n    executable: \"bin/sum.py\"\n    arguments: \"ExtractRow:output\"\n  references: [\"ExtractRow:output\"]\n`}</code></pre>\n    <h2>{`DataReference`}</h2>\n    <p><inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{` is the way to define references to data in FlowIR.`}</p>\n    <p>{`Components define their dependencies to other components in the graph and data external to the graph (e.g. `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`data`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`application-dependencies`}</inlineCode>{`) using `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{`s.\n`}<a parentName=\"p\" {...{\n        \"href\": \"#key-outputs\"\n      }}>{`Key-outputs`}</a>{` also use `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{`s.`}</p>\n    <p>{` A `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{` can have two forms: an `}<inlineCode parentName=\"p\">{`absolute`}</inlineCode>{` and a `}<inlineCode parentName=\"p\">{`relative`}</inlineCode>{` representation. The latter is syntax sugar for the former.`}</p>\n    <h4>{`Absolute representation of DataReference`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`stage<Index>.<producerName>:/<fileRef>:<method>\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{` points to either a `}<inlineCode parentName=\"p\">{`component`}</inlineCode>{` in the graph or a `}<inlineCode parentName=\"p\">{`directory`}</inlineCode>{` in the root of the instance directory.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`stage<Index>.`}</inlineCode>{`: is the stage of the producer. This is only valid for `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{`s that point to components. `}<inlineCode parentName=\"li\">{`Index`}</inlineCode>{` should be an integer greater than 0.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`producerName`}</inlineCode>{`: Either the name of a producer `}<inlineCode parentName=\"li\">{`component`}</inlineCode>{`, or the name of the `}<inlineCode parentName=\"li\">{`directory`}</inlineCode>{` in the root of the instance directory. The directories include all `}<inlineCode parentName=\"li\">{`application-dependencies`}</inlineCode>{` and directories that `}<inlineCode parentName=\"li\">{`ST4SD`}</inlineCode>{` manages (e.g. `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`data`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`conf`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`hooks`}</inlineCode>{`, etc).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`</fileRef>`}</inlineCode>{`: Optional path, relative to the root directory of the `}<inlineCode parentName=\"li\">{`producer`}</inlineCode>{`. When omitted defaults to `}<inlineCode parentName=\"li\">{`/`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`method`}</inlineCode>{`: One of `}<inlineCode parentName=\"li\">{`ref`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`output`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`copy`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`link`}</inlineCode>{`. The `}<inlineCode parentName=\"li\">{`method`}</inlineCode>{` determines how ST4SD interprets the `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{`.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ref`}</inlineCode>{`: The `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` expands to the absolute path of the referenced file/directory`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`output`}</inlineCode>{`: The `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` expands to the `}<inlineCode parentName=\"li\">{`contents`}</inlineCode>{` of the referenced file.\nIf the reference is to a component with the `}<inlineCode parentName=\"li\">{`fileref`}</inlineCode>{` ”/” then the `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` is rewritten to point to the file containing the most recent `}<inlineCode parentName=\"li\">{`stdout`}</inlineCode>{` of the component.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`copy`}</inlineCode>{`: The `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` does not expand to anything. If a `}<inlineCode parentName=\"li\">{`component`}</inlineCode>{` definition contains such a `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` in its `}<inlineCode parentName=\"li\">{`references`}</inlineCode>{` field, then the runtime will copy the referenced path inside the root directory of the component’s task right before the execution of the task.`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`link`}</inlineCode>{`: Similar to `}<inlineCode parentName=\"li\">{`copy`}</inlineCode>{` above. The difference is that instead of copying the referenced path, the runtime will create a link to the referenced path.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h4>{`Relative representation of a DataReference`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`relative`}</inlineCode>{` representation of a `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{` is just syntax sugar for the `}<inlineCode parentName=\"p\">{`absolute`}</inlineCode>{` representation. The `}<inlineCode parentName=\"p\">{`DataReference`}</inlineCode>{` can omit the `}<inlineCode parentName=\"p\">{`stage<Index>`}</inlineCode>{` part.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If the relative `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` is in the `}<inlineCode parentName=\"li\">{`references`}</inlineCode>{` field of a `}<inlineCode parentName=\"li\">{`component`}</inlineCode>{` then the `}<inlineCode parentName=\"li\">{`Index`}</inlineCode>{` is the same as the `}<inlineCode parentName=\"li\">{`component.stage`}</inlineCode>{` field.`}</li>\n      <li parentName=\"ul\">{`If the relative `}<inlineCode parentName=\"li\">{`DataReference`}</inlineCode>{` is in a `}<a parentName=\"li\" {...{\n          \"href\": \"#key-outputs\"\n        }}><inlineCode parentName=\"a\">{`key-output`}</inlineCode></a>{` definition then the `}<inlineCode parentName=\"li\">{`key-output`}</inlineCode>{` should also contain the `}<inlineCode parentName=\"li\">{`stages`}</inlineCode>{` field. See `}<a parentName=\"li\" {...{\n          \"href\": \"#key-outputs\"\n        }}><inlineCode parentName=\"a\">{`key-output`}</inlineCode></a>{` documentation for more details.`}</li>\n    </ul>\n    <h2>{`Environments`}</h2>\n    <p>{`The environment that components run in is defined within the `}<inlineCode parentName=\"p\">{`environments`}</inlineCode>{` section of the FlowIR YAML. If you don’t define anything in this section ST4SD will create a default environment. `}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`environments:\n  <platform-name>:\n    myDefinedEnvironment:\n      ENV-VAR1: value/for/env-var1\n      ENV-VAR2: value/for/env-var2\n`}</code></pre>\n    <p>{`A component uses a defined environment by setting `}<inlineCode parentName=\"p\">{`command.environment`}</inlineCode>{` to the environment name. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`components:\n  - name: myComponent\n    command:\n      executable: app.exe\n      environment: myDefinedEnvironment\n`}</code></pre>\n    <p>{`You can set `}<inlineCode parentName=\"p\">{`command.environment`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`None`}</inlineCode>{` to ensure ST4SD does not add any environment variables to the task execution. Note, backends ST4SD uses e.g. k8s, lsf, may add env-vars afterwards. `}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`command.environment`}</inlineCode>{` is not explicitly set, the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` will default to using a built-in, environment called `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{`. This contains the environment from which `}<inlineCode parentName=\"p\">{`elaunch.py`}</inlineCode>{` was run.`}</p>\n    <p>{`You can override the definition of `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{` if you wish, for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`environments:\n  default:\n    environment:\n      ENV-VAR1: sensible/default/for/env-var1\n      ENV-VAR2: sensible/default/for/env-var2\n      ENV-VAR3: sensible/default/for/env-var3\n`}</code></pre>\n    <h2>{`Variables`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` field follows the format below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`variables:\n  <platform name:str>:\n    Optional(global):\n      <variable name:str>: <value: str, int, bool, float>\n    Optional(stages):\n      <stage index: int>:\n        <variable name:str>: <value: str, int, bool, float>\n`}</code></pre>\n    <p>{`Variables are grouped under a platform, and can either be global or stage-specific. This example uses the following variables definition:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`variables:\n  default:\n    global:\n      numberOfPoints: 3\n    stages:\n      2:\n        addToSum: 10\n\n  artifactory:\n    stages:\n      2:\n        addToSum: -5\n`}</code></pre>\n    <h2>{`Using Variables`}</h2>\n    <p>{`You refer to variables in FlowIR with the syntax `}<inlineCode parentName=\"p\">{`%($VARIABLE_NAME)s`}</inlineCode>{`.`}</p>\n    <p>{`FlowIR supports using variables to define:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`values of fields`}</li>\n      <li parentName=\"ul\">{`values of other variables`}</li>\n    </ul>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`variables:\n  default:\n    global:\n      salutation: \"hello\"\n      subject: \"world\"\n      message: \"%(salutation)s %(subject)s\"\n\ncomponents:\n- name: hello-message\n  command:\n    executable: echo\n    arguments: \"%(message)s\"\n`}</code></pre>\n    <p>{`Here we use the value of the `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` variable in the arguments of the `}<inlineCode parentName=\"p\">{`hello-message`}</inlineCode>{` component.\nThe value assigned to the `}<inlineCode parentName=\"p\">{`message`}</inlineCode>{` variable itself uses two other variables, `}<inlineCode parentName=\"p\">{`salutation`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`subject`}</inlineCode>{`.`}</p>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The first character of the value for a YAML field cannot be `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` so\nremember to enclose fields that contain variables references in quotes.`}</p>\n    </InlineNotification>\n    <h3>{`Variables can contain space separated arrays`}</h3>\n    <p>{`You can also treat a variable as an array of space separated items.\nHere’s you can reference the `}<inlineCode parentName=\"p\">{`<index>`}</inlineCode>{`-th entry of a `}<inlineCode parentName=\"p\">{`<variable>`}</inlineCode>{`:`}</p>\n    <p><inlineCode parentName=\"p\">{`%(<variable>)s[<Index>]`}</inlineCode></p>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`The 1st entry is at index 0.`}</p>\n    </InlineNotification>\n    <p>{`Examples:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`%(names)s[0]`}</inlineCode>{`: This resolves to the 1st entry in the `}<inlineCode parentName=\"li\">{`names`}</inlineCode>{` array.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`%(names)s[%(index)s]`}</inlineCode>{`: Indices may be variables too!`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`variables:\n  default:\n    global:\n      # All variables are strings in FlowIR\n      names: Ann Bob\n      # Even those that look like a number\n      population: 2\n\ncomponents:\n- name: hello-you\n  command:\n    executable: echo\n    # Here we use the  auto-generated \\`replica\\` variable\n    # that st4sd injects to replicating Components\n    arguments: \"hi %(names)s[%(replica)s]\"\n  workflowAttributes:\n    # You can use variables in any field.\n    replicate: \"%(population)s\"\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\n      <p>{`Variables are all strings in FlowIR. If ST4SD expects a field to have a certain type then it will coerce the value\nthat variable references resolve to into the appropriate type. In the example above `}<inlineCode parentName=\"p\">{`workflowAttributes.replicate`}</inlineCode>{`\nexpects an `}<em parentName=\"p\">{`integer`}</em>{` value. ST4SD will convert the value of the variable population `}<inlineCode parentName=\"p\">{`population`}</inlineCode>{` to\nthe integer value `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <h2>{`Blueprints`}</h2>\n    <p>{`ST4SD supports defining default options for (a) all components and/or (b) for components that belong in a specific stage, via the `}<inlineCode parentName=\"p\">{`blueprint`}</inlineCode>{` top-level field:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`blueprint:\n  <platform name:str>:\n    Optional(global):\n      <component options>\n    Optional(stages):\n      <stage index:int>:\n        <component options>\n`}</code></pre>\n    <p>{`This example defines the blueprint for 2 platforms. It specifies the default options when using the 2 platforms (setting values for resourceManager, resourceRequest for all components when `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{` is the chosen platform) and specializes components in stage 1 when using the `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{` platform (increase their memory request)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`blueprint:\n  default:\n    global:\n      command:\n        environment: environment\n  artifactory:\n    global:\n      resourceRequest:\n        memory: 100Mi\n      resourceManager:\n        config:\n          backend: kubernetes\n        kubernetes:\n          image: res-drl-hpc-docker-local.artifactory.swg-devops.com/st4sd-runtime-core:latest\n    stages:\n      1:\n        resourceRequest:\n            memory: 150Mi\n`}</code></pre>\n    <h2>{`Platforms`}</h2>\n    <p>{`A platform is a named collection of `}<a parentName=\"p\" {...{\n        \"href\": \"#blueprints\"\n      }}>{`blueprints`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#variables\"\n      }}>{`variables`}</a>{`, `}{`[overrides][#override]`}{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#environments\"\n      }}>{`environments`}</a>{`. `}</p>\n    <p>{`You define the named platforms using the top-level `}<inlineCode parentName=\"p\">{`platform`}</inlineCode>{` array`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`platforms:\n   - bigmem\n   - nvidia-gpu\n`}</code></pre>\n    <p>{`When you run a workflow you specify the platform by name. Then the relevant sections of  `}<a parentName=\"p\" {...{\n        \"href\": \"#blueprints\"\n      }}>{`blueprints`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"#variables\"\n      }}>{`variables`}</a>{`, `}{`[overrides][#override]`}{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#environments\"\n      }}>{`environments`}</a>{` will become active. `}</p>\n    <p>{`Platforms are designed to assist in implementing generic components which are specialized for different purposes when specifying different platforms. This is particularly useful when working with packages that can utilize various kinds of HPC resources (e.g. a cluster fitted with LSF, a kubernetes installation, etc). For example, a component can be configured to utilize a certain amount of GPUs when it targets platform A but exclusively use CPUs on platform B.`}</p>\n    <p>{`In the sum-numbers example there exist 2 platforms: `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform leads to components executing as vanilla Operating System. Whereas, the `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{` platform configures the workflow for execution on kubernetes.`}</p>\n    <h3>{`default platform`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform is special: The `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` fills in missing fields of the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` blueprint. See, this platform is intended to act as the `}<inlineCode parentName=\"p\">{`base`}</inlineCode>{` layer for workflow environments, and component variables/options. When an option/variable/environment is defined within the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform it is automatically inherited by all other platforms (unless they explicitly override said option/variable/environment); read the `}<a parentName=\"p\" {...{\n        \"href\": \"#flowir-optionsvariable-inheritance-sequence\"\n      }}>{`FlowIR options/variable inheritance sequence`}</a>{` section for more information on the options/variable layering aspect of ST4SD platforms.`}</p>\n    <p>{`In this example, the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform defines two variable (a global, and one that is only visible for components in stage 2), the special environment `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{`, and a global blueprint which sets the default value of the `}<inlineCode parentName=\"p\">{`command.environment`}</inlineCode>{` options for all components. See `}<a parentName=\"p\" {...{\n        \"href\": \"#environments\"\n      }}>{`environments`}</a>{` for more information about environments.`}</p>\n    <h3>{`artifactory platform`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{` platform overrides the default value (from `}<inlineCode parentName=\"p\">{`10`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`-5`}</inlineCode>{`) for the stage 2 variable `}<inlineCode parentName=\"p\">{`addToSum`}</inlineCode>{`, defines default options for all components which instruct the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` to utilize the `}<inlineCode parentName=\"p\">{`kubernetes`}</inlineCode>{` backend, and overrides the `}<inlineCode parentName=\"p\">{`environment`}</inlineCode>{` environment. Moreover, it serves as an example on how to use the layering system of ST4SD to specialize the components which belong in a particular stage. Specifically, the `}<inlineCode parentName=\"p\">{`artifactory`}</inlineCode>{` platform configures components belonging in stage 1 to use `}<inlineCode parentName=\"p\">{`150Mi`}</inlineCode>{` of memory instead of `}<inlineCode parentName=\"p\">{`100Mi`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`0.1`}</inlineCode>{` CPU-units instead of `}<inlineCode parentName=\"p\">{`0.25`}</inlineCode>{`.`}</p>\n    <h2>{`FlowIR Scopes`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` supports nested scopes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`global (i.e. visible to all components)`}</li>\n      <li parentName=\"ul\">{`visible to components within a specific stage`}</li>\n      <li parentName=\"ul\">{`visible to just one component`}</li>\n    </ul>\n    <p>{`These scopes are layered in a specific order by the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{`.`}</p>\n    <h2>{`FlowIR options/variable inheritance sequence`}</h2>\n    <p>{`This is the full order of inheritance for component options.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Builtin `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` blueprint`}</li>\n      <li parentName=\"ol\">{`Default `}<inlineCode parentName=\"li\">{`global`}</inlineCode>{` blueprint`}</li>\n      <li parentName=\"ol\">{`Default `}<inlineCode parentName=\"li\">{`stage`}</inlineCode>{` blueprint`}</li>\n      <li parentName=\"ol\">{`Platform `}<inlineCode parentName=\"li\">{`global`}</inlineCode>{` blueprint`}</li>\n      <li parentName=\"ol\">{`Platform `}<inlineCode parentName=\"li\">{`stage`}</inlineCode>{` blueprint`}</li>\n      <li parentName=\"ol\">{`Component definition`}</li>\n      <li parentName=\"ol\">{`Resolve interpreter option which may affect command.executable and command.arguments`}</li>\n    </ol>\n    <p>{`Inheritance for `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` works in the same spirit (it’s effectively the same order of steps but without steps: `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`7`}</inlineCode>{`).`}</p>\n    <p>{`In the case of `}<inlineCode parentName=\"p\">{`environments`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` follows the rules below:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`If the environment is None (i.e. no environment is selected) then the environment contains the active shell environment.`}</li>\n      <li parentName=\"ol\">{`If the name is the literal string “none” then the environment contains {}`}</li>\n      <li parentName=\"ol\">{`Otherwise the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` uses the definition for the environment name from the selected platform. If there is no definition in the active platform the `}<inlineCode parentName=\"li\">{`st4sd-runtime`}</inlineCode>{` falls back to the  `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{` platform.`}</li>\n      <li parentName=\"ol\">{`If an environment defines a `}<inlineCode parentName=\"li\">{`DEFAULTS`}</inlineCode>{` key then that key is expected to have the format `}<inlineCode parentName=\"li\">{`VAR1:VAR2:VAR3...`}</inlineCode>{`. Other options in the environment could reference the aforementioned vars using the `}<inlineCode parentName=\"li\">{`$VAR`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`\\${VAR}`}</inlineCode>{` notation and these options will be resolved using their matching keys in the default environment. `}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`Any $VAR and \\${VAR} references not matched by `}<inlineCode parentName=\"li\">{`DEFAULTS`}</inlineCode>{` keys will be resolved using the active shell(workflow launch environment). `}</li>\n          <li parentName=\"ol\">{`If a variable is defined in `}<inlineCode parentName=\"li\">{`DEFAULTS`}</inlineCode>{` but there is no value for it in the default environment then treat it as if it was never in the `}<inlineCode parentName=\"li\">{`DEFAULTS`}</inlineCode>{` option in the first place.`}</li>\n        </ol>\n      </li>\n    </ol>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Tip`}</strong>{`: You can use the `}<inlineCode parentName=\"p\">{`ccommand.py`}</inlineCode>{` utility to get a list of all FlowIR details for a particular component of a workflow package using the `}<inlineCode parentName=\"p\">{`-f`}</inlineCode>{` (i.e. `}<inlineCode parentName=\"p\">{`--flowirReport`}</inlineCode>{`) option. Use `}<inlineCode parentName=\"p\">{`--env`}</inlineCode>{` to also view the contents of the component environment. Try targeting different platforms via the `}<inlineCode parentName=\"p\">{`-p`}</inlineCode>{` argument.`}</p>\n    </InlineNotification>\n    <h3>{`Default options`}</h3>\n    <p>{`The careful reader will notice that the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` platform does not contain an option for `}<inlineCode parentName=\"p\">{`resourceManager.config.backend`}</inlineCode>{`. How does the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` decide which backend to use?`}</p>\n    <p>{`Recall that the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` injects default values for the `}<inlineCode parentName=\"p\">{`default.global`}</inlineCode>{` blueprint which are then inherited by all components. The default value for `}<inlineCode parentName=\"p\">{`resourceManager.config.backend`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`local`}</inlineCode>{` which instructs the `}<inlineCode parentName=\"p\">{`st4sd-runtime`}</inlineCode>{` to spawn component tasks as vanilla operating system processes. You can find a detailed list of the ST4SD default values in the ST4SD documentation.`}</p>\n    <h2>{`Key-outputs`}</h2>\n    <p>{`Key-Outputs are named `}<a parentName=\"p\" {...{\n        \"href\": \"#datareference\"\n      }}><inlineCode parentName=\"a\">{`DataReferences`}</inlineCode></a>{` that point to important paths which the virtual experiment produced.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`output:\n  OptimisationResults:\n    data-in: stage1.ExtractEnergies/energies.csv:ref\n    description: homo/lumo results\n    type: csv\n`}</code></pre>\n    <p>{`Above, `}<inlineCode parentName=\"p\">{`output`}</inlineCode>{` is a top-level dictionary whose keys are names of `}<inlineCode parentName=\"p\">{`key-outputs`}</inlineCode>{`. Each key points to a dictionary with this schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`data-in: \"a DataReference\"\n\n# Optional fields\ndescription: \"A human readable description of the file\"\ntype: \"e.g. csv, pdf, etc - this only used to label key-output\"\nstages:\n- stage0\n- stage1\n`}</code></pre>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\nThe DataReference in \"data-in\" can use one of the following reference methods: :ref, :copy, or :output. Here, :copy is just an alias for :ref (i.e paths are not copied). Finally, :output is an alias to out.stdout:ref if the DataReference does not have a /fileRef. Otherwise, :output becomes an alias to /fileRef:ref.\n    </InlineNotification>\n    <InlineNotification kind=\"info\" mdxType=\"InlineNotification\">\nIf \"data-in\" does not contain a \"stage$index.\" prefix then you can list stages to use as the \"stage\" prefix. If you provide multiple stages then later stages will override the path.\n    </InlineNotification>\n    <h2>{`Interface and Properties`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` of a virtual experiment (e.g. workflow) defines:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The specification used to describe `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems it processes e.g. SMILEs for small molecules`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems from input data`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the values of `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` that the virtual experiment computes`}</li>\n    </ul>\n    <p>{`You can find more information about writing an interface `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/writing-a-virtual-experiment-interface\"\n      }}>{`here`}</a>{` and a tutorial on how to use an interface `}<a parentName=\"p\" {...{\n        \"href\": \"/overview/using-a-virtual-experiment-interface\"\n      }}>{`here`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","kind","isMDXComponent"],"sourceRoot":""}
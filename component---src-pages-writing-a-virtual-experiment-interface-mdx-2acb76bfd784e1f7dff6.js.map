{"version":3,"file":"component---src-pages-writing-a-virtual-experiment-interface-mdx-2acb76bfd784e1f7dff6.js","mappings":"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","sources":["webpack://st4sd-overview/./src/pages/writing-a-virtual-experiment-interface.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/alessandropomponio/Documents/GitHub/public/st4sd/overview/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/*\n       Copyright IBM Inc. All Rights Reserved.\n      SPDX-License-Identifier: Apache-2.0\n     */}\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this page to learn how to write a virtual experiment interface.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Interface Definition</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Input Extraction Methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Property Extraction Methods</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Example</AnchorLink>\n    </AnchorLinks>\n    <p>{`A core-concept in ST4SD is a virtual experiment. This is a computational workflow that takes as input one or more systems of a given type, and produces as output values of `}<inlineCode parentName=\"p\">{`properties`}</inlineCode>{` of those systems.`}</p>\n    <p>{`This document descries how ST4SD developers can describe this information in their virtual experiments via an `}<inlineCode parentName=\"p\">{`interface`}</inlineCode></p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` of a virtual experiment defines:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The specification used to describe `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems it processes e.g. SMILEs for small molecules`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` systems from input data`}</li>\n      <li parentName=\"ul\">{`Instructions to extract the values of `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` that the virtual experiment computes`}</li>\n    </ul>\n    <p>{`Once a virtual experiment has an `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{`  ST4SD can return a `}<inlineCode parentName=\"p\">{`pandas.DataFrame`}</inlineCode>{`  containing the properties calculated by instances of the virtual experiment, as well as the ids of the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` systems that an instance processed. This functionality is provided via the `}<inlineCode parentName=\"p\">{`st4sd-datastore`}</inlineCode>{` API and the `}<inlineCode parentName=\"p\">{`st4sd-runtime-service`}</inlineCode>{` API. See `}<a parentName=\"p\" {...{\n        \"href\": \"/st4sd/overview/using-a-virtual-experiment-interface\"\n      }}>{`using a virtual experiment interface`}</a>{` for further information. `}</p>\n    <h2>{`Interface Definition`}</h2>\n    <p>{`An `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` is an optional top-level `}<inlineCode parentName=\"p\">{`FlowIR`}</inlineCode>{` key which describes what `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`properties`}</inlineCode>{` of a virtual experiment, as well as how to extract their values. `}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`See the `}<a parentName=\"p\" {...{\n          \"href\": \"/st4sd/overview/tutorial\"\n        }}>{`tutorial`}</a>{` for a refresher on virtual experiment definitions and FlowIR.`}</p>\n    </InlineNotification>\n    <p>{`The general scheme of an `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` is  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`interface:\n  description: #A description of the virtual experiment. Optional\n  inputSpec:\n    namingScheme: #The scheme/specification used to define your inputs e.g. SMILES\n    inputExtractionMethod: \n      $INPUT_EXTRACTION_METHOD_NAME: #The name of an input extraction method - see \"Input Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method.. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n  propertiesSpec: # A list of properties to extract\n  - name: #The name of the property\n    propertyExtractionMethod:\n      $PROPERTY_EXTRACTION_METHOD_NAME: #The name of a property extraction method - see the \"Property Extraction Method\" section for possibilities\n        source:  #Optional source method used to provide input to the extraction method. See the \"Source Methods\" section for potential values.\n          ...\n        args: #Optional arguments for the extraction method\n          ...\n`}</code></pre>\n    <p>{`The 2 main fields are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`interface.inputSpec`}</inlineCode>{`: A dictionary that describes the inputs of the virtual experiment and how to extract them`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`interface.propertiesSpec`}</inlineCode>{`: An array of dictionaries (one per `}<inlineCode parentName=\"li\">{`property`}</inlineCode>{`) that describes how to extract the values of the `}<inlineCode parentName=\"li\">{`property`}</inlineCode></li>\n    </ul>\n    <p>{`Within both fields the developer defines  extraction methods which tell ST4SD how to extract values that the virtual experiment reads (`}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` ids) and writes (`}<inlineCode parentName=\"p\">{`property`}</inlineCode>{` values). `}</p>\n    <ul>\n      <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n          \"href\": \"#input-extraction-methods\"\n        }}>{`input extraction methods`}</a>{` for details on choices for that field`}</li>\n      <li parentName=\"ul\">{`See `}<a parentName=\"li\" {...{\n          \"href\": \"#property-extraction-methods\"\n        }}>{`property extraction methods`}</a>{` for details on choices for that field`}</li>\n    </ul>\n    <p>{`Both input extraction methods and property extraction methods can have 2 sub-fields, `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`args`}</inlineCode>{` which may be optional.  If the `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` method is present it must be one of the options outlined in `}<a parentName=\"p\" {...{\n        \"href\": \"#source-methods\"\n      }}>{`source methods`}</a></p>\n    <h2>{`Input Extraction Methods`}</h2>\n    <p>{`Input extraction methods are used by to retrieve a list of the input system ids`}</p>\n    <h3>{`csvColumn`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`csvColumn`}</inlineCode>{` extraction method if the input ids of your experiment are defined in a column of an input CSV file `}<strong parentName=\"p\">{`which has column headers`}</strong>{`.`}</p>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`source:\n  path: #The path SOURCE-METHOD. See source-methods for more\nargs:\n  column: #The name of the column in the CSV file containing the ids (the column header)\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-YAML\"\n      }}>{`interface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      csvColumn:\n        source:\n          path: 'input/input_smiles.csv'\n        args:\n          column: \"SMILES\"\n`}</code></pre>\n    <h3>{`hookGetInputIds`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`hookGetInputIds`}</inlineCode>{` when you want to provide your own python function for getting the input ids.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`To use this method the developer must provide an implementation of the following python function and place it in a file called `}<inlineCode parentName=\"p\">{`interface.py`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` directory of their virtual experiment. Note: this file can contain other functions also.`}</p>\n    </InlineNotification>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def get_input_ids(input_id_file: str, variables: Dict[str, str]) -> List[str]:\n   '''\n       Params: \n            input_id_file (str): The path to the location of the file that contains input ids of the inputs systems. This comes from the \\`source.path\\` option in the interface YAML.\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A list of strings each of which is the id of an input system\n   '''\n     pass\n`}</code></pre>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`source:\n  path: #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the \\`input-ids\\`.\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`interface:\n  inputSpec:\n    namingScheme: 'SMILES'\n    inputExtractionMethod: \n      hookGetInputIds:\n        source:\n          path: 'input/input_smiles.csv'\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`The `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/st4sd/band-gap-gamess\"\n        }}>{`band-gap-gamess`}</a>{` virtual experiment uses `}<inlineCode parentName=\"p\">{`hookGetInputIds`}</inlineCode>{` to describe the extraction of input ids.`}</p>\n    </InlineNotification>\n    <h2>{`Property Extraction Methods`}</h2>\n    <p>{`Property extraction methods conceptually produce a properties table which contains at least 2 columns: `}<inlineCode parentName=\"p\">{`(input-id, $propertyName)`}</inlineCode>{`where $propertyName is the name of the property in the `}<inlineCode parentName=\"p\">{`propertiesSpec`}</inlineCode>{` element using the extraction method. Note: in practice `}<inlineCode parentName=\"p\">{`propertyName`}</inlineCode>{` will be transformed to lowercase.`}</p>\n    <h3>{`csvDataFrame`}</h3>\n    <p>{`Use this method if `}</p>\n    <ul>\n      <li parentName=\"ul\">{`there is a single CSV file to extract the values of a particular property from for all input`}</li>\n      <li parentName=\"ul\">{`The properties are stored in a column of this CSV file`}</li>\n      <li parentName=\"ul\">{`The input ids are stored in a column of this CSV file`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong></p>\n    <p>{`The table created by this method must have column headers `}<inlineCode parentName=\"p\">{`input-id`}</inlineCode>{` and $PROPERTYNAME.  The `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` property extractor can change the column names to these correct values using the `}<inlineCode parentName=\"p\">{`renameColumns`}</inlineCode>{` option (see Example)`}</p>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`source:\n   $SOURCE_METHOD_NAME # Name of the source methods and its options. See below. \nargs:\n   renameColumns: #Optional: Dictionary whose keys are column names in the CSV file and values are the names to rename the associated key columns. Output column names are implicitly converted to \\`lowercase\\`\n   \\`\\${name}: \\${value}\\`: #(Optional) Arguments to the \\`pandas.read_csv()\\` method. The default arguments are \\`engine=\"python\"\\` and \\`sep=None\\`.\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`propertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    csvDataFrame:\n      source:\n        keyOutput: 'FinalEnergies'\n      args:\n        renameColumns:\n          SMILE: \"input-id\"\n        usecols:\n        - \"SMILE\"\n        - \"band-gap\"\n`}</code></pre>\n    <h3>{`hookGetProperties`}</h3>\n    <p>{`Use`}<inlineCode parentName=\"p\">{`hookGetProperties`}</inlineCode>{` when you want to provide your own python function for getting the property values. `}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`To use this method the developer must provide an implementation of the following python function and place it in a file called `}<inlineCode parentName=\"p\">{`interface.py`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`hooks`}</inlineCode>{` directory of their virtual experiment. Note: this file can contain other functions also.`}</p>\n    </InlineNotification>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def get_properties(property_name:str, property_output_file: str, input_id_file: str, variables: Dict[str, str]) -> pandas.DataFrame\n   '''\n       Params: \n            property_name (str): The name of the property the function should return the values of.  \n            property_output_file (str): The path to the file containing the properties \n            input_id_file (str): The path to the file containing the input_ids\n            variables (dict): A dictionary of the global and user variables passed to the virtual experiment instance\n            \n       Returns: \n            A \\`pandas.DataFrame\\` that contains at least 2 columns: \\`input-id\\`, \\`\\${propertyName}\\`. \n   '''\n     pass\n`}</code></pre>\n    <p>{`If `}<inlineCode parentName=\"p\">{`hookGetProperties`}</inlineCode>{` is defined as the propertyExtractionMethod for property `}<inlineCode parentName=\"p\">{`idx`}</inlineCode>{` the values passed to the parameters of this function are determined as follows`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`property_name`}</inlineCode>{` : The value of `}<inlineCode parentName=\"li\">{`interface.propertiesSpec[idx].name`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`property_output_file`}</inlineCode>{`: The value returned by the`}<inlineCode parentName=\"li\">{`interface.propertiesSpec[idx].propertyExtractionMethod.hookGetProperties.source`}</inlineCode>{` method`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`input_id_file`}</inlineCode>{`:  The value of `}<inlineCode parentName=\"li\">{`interface.inputSpec.inputExtractionMethod.$METHOD.source`}</inlineCode></li>\n    </ul>\n    <p>{`Note: The column headers in the returned pandas DataFrame will be converted to lowercase by ST4SD. `}</p>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`hookGetInputIds:\n  source: #A source method - see below for details\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`propertiesSpec:\n- name: 'band-gap'\n  propertyExtractionMethod:\n    hookGetProperties:\n      source:\n        keyOutput: 'FinalEnergies'\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`The `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/st4sd/band-gap-gamess\"\n        }}>{`band-gap-gamess`}</a>{` virtual experiment uses `}<inlineCode parentName=\"p\">{`hookGetProperties`}</inlineCode>{` to describe the extraction of properties.`}</p>\n    </InlineNotification>\n    <h2>{`Source methods`}</h2>\n    <p>{`Source methods define different ways of defining a source file-path that is used by input or property extraction methods`}</p>\n    <h3>{`path`}</h3>\n    <p>{`Use this method if you know the full path of the source file. `}</p>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-YAML\"\n      }}>{`path: $PATH #A path relative to the root directory of the virtual experiment instance. It points to the CSV file that contains the \\`input-ids\\`.\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-YAML\"\n      }}>{`propertyExtractionMethod:\n  hookGetProperties:\n    source:\n      path: \"stages/stage1/EnergiesExtraction/energies.csv\"\n`}</code></pre>\n    <h3>{`keyOutput`}</h3>\n    <p>{`Use this method if the properties are in a key-output of the experiment. This method avoids having to know the path to the file (which could change if storage methods change)`}</p>\n    <h4>{`Options`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-YAML\"\n      }}>{`# The name of a key-output in the experiment.\n# These are keys of the top-level FlowIR field \\`output\\`.\nkeyOutput: $KEYOUTPUT\n`}</code></pre>\n    <h4>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-YAML\"\n      }}>{`propertyExtractionMethod:\n  hookGetProperties:\n    source:\n      keyOutput: \"FinalEnergies\"\n`}</code></pre>\n    <h2>{`Example`}</h2>\n    <p>{`In this example we have a simple virtual experiment that counts vowels and letters in strings. Here is the FlowIR definition:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`output:\n  vowels:\n    data-in: stage0.count-vowels/vowels.csv:ref\n  letters:\n    data-in: stage0.count-letters/letters.csv:ref\n\ncomponents:\n- name: count-vowels\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_vowels.py\n    arguments: input/words.csv:ref\n\n- name: count-letters\n  references:\n  - input/words.csv:ref\n  command:\n    executable: bin/count_letters.py\n    arguments: input/words.csv:ref\n`}</code></pre>\n    <p>{`Here is an input `}<inlineCode parentName=\"p\">{`words.csv`}</inlineCode>{` file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`word;\nhello;\nawesome;\nworld;\n`}</code></pre>\n    <p>{`When we process the above `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` file with this workflow we get 2 outputs:`}</p>\n    <p>{`The output `}<inlineCode parentName=\"p\">{`vowels`}</inlineCode>{` contains the CSV file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`a;e;i;o;u;word;vowels\n0;1;0;1;0;hello;2\n1;2;0;1;0;awesome;4\n0;0;0;1;0;world;1\n`}</code></pre>\n    <p>{`The output `}<inlineCode parentName=\"p\">{`letters`}</inlineCode>{` contains the CSV file:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`word;letters\nhello;5\nawesome;7\nworld;5\n`}</code></pre>\n    <h3>{`Interface`}</h3>\n    <p>{`An interface to this experiment is shown below. This interface used `}<inlineCode parentName=\"p\">{`csvColumn`}</inlineCode>{` input extraction method and the `}<inlineCode parentName=\"p\">{`csvDataFrame`}</inlineCode>{` property extraction method. These methods mean the developer does not have to write any other code. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`interface:\n  description: Counts vowels in words\n  inputSpec:\n    namingScheme: words\n    inputExtractionMethod:\n      csvColumn:\n        source:\n          path: input/words.csv\n        args:\n          column: word\n  propertiesSpec:\n  - name: Vowels\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: vowels\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - vowels\n  - name: Letters\n    propertyExtractionMethod:\n      csvDataFrame:\n        source:\n          keyOutput: letters\n        args:\n          renameColumns:\n            word: input-id\n          usecols:\n          - word\n          - letters\n`}</code></pre>\n    <h3>{`Run Details`}</h3>\n    <p>{`Adding the `}<inlineCode parentName=\"p\">{`interface`}</inlineCode>{` definition will cause instances of the virtual experiment to generate 2 new files:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\\${INSTANCE_DIR}/output/properties.csv`}</inlineCode>{`: This is a `}<inlineCode parentName=\"li\">{`;`}</inlineCode>{` delimited `}<inlineCode parentName=\"li\">{`CSV`}</inlineCode>{` file that contains the `}<inlineCode parentName=\"li\">{`properties`}</inlineCode>{` columns produced by each property defined in `}<inlineCode parentName=\"li\">{`propertySpec`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`\\${INSTANCE_DIR}/outputs/input-ids.json`}</inlineCode>{`: A JSON file that contains an array of strings. Each string is the id of an input system.`}</li>\n    </ul>\n    <p>{`For the above example we would get the following in  `}<inlineCode parentName=\"p\">{`\\${INSTANCE_DIR}/output/properties.csv`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`input-id;vowels;letters\nhello;2;5\nawesome;4;7\nworld;1;5\n`}</code></pre>\n    <p>{`The input ids file (`}<inlineCode parentName=\"p\">{`\\${INSTANCE_DIR}/outputs/input-ids.json`}</inlineCode>{`) looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`[\n    \"hello\",\n    \"awesome\",\n    \"world\"\n]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}